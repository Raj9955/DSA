LeetCode 45
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2

soln:

class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        int reachable =0;
        int jump = 0;
        int window_last_index=0;
        if(nums.length==1)
            return jump;

        for(int i=0;i<n;i++)
        {
          reachable = Math.max(reachable,i+nums[i]);

            //explore all options then update
            if(i==window_last_index)
            {
                window_last_index=reachable;
                jump++;

                if(reachable>=n-1)
                    return jump;
            }
        }

        return jump;
    }
}